{
 "file_path": "src\\version\\removals.mjs",
 "part_id": "3e3ca33f-1e57-4773-b451-b841de467786",
 "hunks": [
  "0+import { list_without_multiple } from '../list/without/multiple.mjs';\nimport { directory_current_with_separator } from '../directory/current/with/separator.mjs';\nimport { equal } from '../equal.mjs';\nimport { string_starts_with } from '../string/starts/with.mjs';\nimport { implies } from '../implies.mjs';\nimport { list_all } from '../list/all.mjs';\nimport { list_filter } from '../list/filter.mjs';\nimport { string_prefix_without } from '../string/prefix/without.mjs';\nimport { list_map } from '../list/map.mjs';\nimport { directory_current } from '../directory/current.mjs';\nimport { directory_read_directories } from '../directory/read/directories.mjs';\nimport { path_exists } from '../path/exists.mjs';\nimport { version_path_files_get } from './path/files/get.mjs';\nimport { git_ignore_filter } from '../git/ignore/filter.mjs';\nexport async function version_removals(repository_name, file_paths) {\n    let files_current_filtered = await git_ignore_filter(file_paths);\n    let repository_files_path = version_path_files_get(repository_name);\n    let paths;\n    if (await path_exists(repository_files_path)) {\n        paths = await directory_read_directories(repository_files_path);\n    } else {\n        paths = [];\n    }\n    let dc = directory_current();\n    let mapped = list_map(paths, p => dc + string_prefix_without(p, repository_files_path));\n    let files_committed = list_filter(mapped, m1 => list_all(mapped, m2 => implies(string_starts_with(m2, m1), equal(m1, m2))));\n    let mapped2 = list_map(files_current_filtered, f => directory_current_with_separator() + f);\n    let removals = list_without_multiple(files_committed, mapped2);\n    return removals;\n}"
 ]
}