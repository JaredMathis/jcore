{
 "file_path": "src\\version\\file\\difference\\generic.mjs",
 "part_id": "b541a528-dc42-4c12-97fe-7a66cb64b172",
 "hunks": [
  "0+import { string_difference_get } from '../../../string/difference/get.mjs';\nimport { list_max_or_0 } from '../../../list/max/or/0.mjs';\nimport { version_property_hunks } from '../../property/hunks.mjs';\nimport { version_path_file_directory } from '../../path/file/directory.mjs';\nimport { arguments_assert } from '../../../arguments/assert.mjs';\nimport { version_property_path } from '../../property/path.mjs';\nimport { version_file_contents } from '../contents.mjs';\nimport { string_identifier_is } from '../../../string/identifier/is.mjs';\nimport { path_is } from '../../../path/is.mjs';\nimport { directory_read } from '../../../directory/read.mjs';\nimport { list_map } from '../../../list/map.mjs';\nimport { string_prefix_without } from '../../../string/prefix/without.mjs';\nimport { string_suffix_without } from '../../../string/suffix/without.mjs';\nimport { file_extension_json } from '../../../file/extension/json.mjs';\nimport { integer_parse } from '../../../integer/parse.mjs';\nimport { function_is } from '../../../function/is.mjs';\nimport { directory_separator } from '../../../directory/separator.mjs';\nimport { add_1 } from '../../../add/1.mjs';\nimport { version_path_file_get } from '../../path/file/get.mjs';\nimport { path_exists } from '../../../path/exists.mjs';\nexport async function version_file_difference_generic(repository_name, file_path, contents_new_get) {\n    arguments_assert(arguments, [\n        string_identifier_is,\n        path_is,\n        function_is\n    ]);\n    let contents_old = await version_file_contents(repository_name, file_path);\n    let contents_new = await contents_new_get(file_path);\n    let hunks_new = string_difference_get(contents_old, contents_new);\n    let repository_file_directory_path = version_path_file_directory(repository_name, file_path);\n    let mapped;\n    if (await path_exists(repository_file_directory_path)) {\n        let paths = await directory_read(repository_file_directory_path);\n        mapped = list_map(paths, file_path => {\n            let without_prefix = string_prefix_without(file_path, repository_file_directory_path + directory_separator());\n            let without_suffix = string_suffix_without(without_prefix, file_extension_json());\n            let version = integer_parse(without_suffix);\n            return version;\n        });\n    } else {\n        mapped = [];\n    }\n    let max = list_max_or_0(mapped);\n    let version = add_1(max);\n    let version_path = version_path_file_get(repository_name, file_path, version);\n    let property_version_path = version_property_path();\n    let property_hunks = version_property_hunks();\n    return {\n        [property_version_path]: version_path,\n        [property_hunks]: hunks_new\n    };\n}"
 ]
}