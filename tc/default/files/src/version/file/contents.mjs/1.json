{
 "file_path": "src\\version\\file\\contents.mjs",
 "part_id": "e4160904-3ba9-4d14-a9c1-03c95a43baa3",
 "hunks": [
  "0+import { string_difference_apply } from '../../string/difference/apply.mjs';\nimport { string_empty } from '../../string/empty.mjs';\nimport { list_add } from '../../list/add.mjs';\nimport { object_property_get } from '../../object/property/get.mjs';\nimport { file_json_read } from '../../file/json/read.mjs';\nimport { file_exists } from '../../file/exists.mjs';\nimport { version_path_file_get } from '../path/file/get.mjs';\nimport { version_property_hunks } from '../property/hunks.mjs';\nimport { git_ignore_add } from '../../git/ignore/add.mjs';\nimport { version_path_root } from '../path/root.mjs';\nimport { path_is } from '../../path/is.mjs';\nimport { string_identifier_is } from '../../string/identifier/is.mjs';\nimport { arguments_assert } from '../../arguments/assert.mjs';\nexport async function version_file_contents(repository_name, file_path) {\n    arguments_assert(arguments, [\n        string_identifier_is,\n        path_is\n    ]);\n    let gitignore_line_to_add = version_path_root();\n    await git_ignore_add(gitignore_line_to_add);\n    let list_hunks = [];\n    let property_hunks = version_property_hunks();\n    let version = 1;\n    let version_path;\n    while (true) {\n        version_path = version_path_file_get(repository_name, file_path, version);\n        if (!await file_exists(version_path)) {\n            break;\n        }\n        let before_object = await file_json_read(version_path);\n        let hunks = object_property_get(before_object, property_hunks);\n        list_add(list_hunks, hunks);\n        version++;\n    }\n    let contents_old = string_empty();\n    for (let hunks of list_hunks) {\n        contents_old = string_difference_apply(contents_old, hunks);\n    }\n    return contents_old;\n}"
 ]
}