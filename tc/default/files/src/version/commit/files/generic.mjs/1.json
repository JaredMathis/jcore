{
 "file_path": "src\\version\\commit\\files\\generic.mjs",
 "part_id": "674d683a-7967-43ba-9fb9-247c2bcd7d8b",
 "hunks": [
  "0+import { version_property_part_id } from '../../property/part/id.mjs';\nimport { version_property_parts } from '../../property/parts.mjs';\nimport { file_name_json } from '../../../file/name/json.mjs';\nimport { version_commits_get } from '../../commits/get.mjs';\nimport { version_path_commits_get } from '../../path/commits/get.mjs';\nimport { version_property_contents } from '../../property/contents.mjs';\nimport { version_property_file_path } from '../../property/file/path.mjs';\nimport { arguments_assert } from '../../../arguments/assert.mjs';\nimport { path_join } from '../../../path/join.mjs';\nimport { add_1 } from '../../../add/1.mjs';\nimport { list_add } from '../../../list/add.mjs';\nimport { guid_generate } from '../../../guid/generate.mjs';\nimport { version_property_path } from '../../property/path.mjs';\nimport { list_length_is_0 } from '../../../list/length/is/0.mjs';\nimport { object_property_get } from '../../../object/property/get.mjs';\nimport { version_property_hunks } from '../../property/hunks.mjs';\nimport { git_ignore_filter } from '../../../git/ignore/filter.mjs';\nimport { string_identifier_is } from '../../../string/identifier/is.mjs';\nimport { list_is } from '../../../list/is.mjs';\nimport { object_is } from '../../../object/is.mjs';\nimport { function_is } from '../../../function/is.mjs';\nimport { list_max_or_0 } from '../../../list/max/or/0.mjs';\nexport async function version_commit_files_generic(repository_name, file_paths, commit_data, difference_get) {\n    arguments_assert(arguments, [\n        string_identifier_is,\n        list_is,\n        object_is,\n        function_is\n    ]);\n    let filtered = await git_ignore_filter(file_paths);\n    let property_hunks = version_property_hunks();\n    let property_file_path = version_property_file_path();\n    let property_contents = version_property_contents();\n    let writes = [];\n    let parts = [];\n    for (let file_path of filtered) {\n        let difference = await difference_get(repository_name, file_path);\n        let hunks = object_property_get(difference, property_hunks);\n        if (!list_length_is_0(hunks)) {\n            let difference_path = object_property_get(difference, version_property_path());\n            let part_id = guid_generate();\n            list_add(parts, part_id);\n            console.log({file_path})\n            let difference_write = {\n                [property_file_path]: difference_path,\n                [property_contents]: {\n                    [version_property_file_path()]: file_path,\n                    [version_property_part_id()]: part_id,\n                    hunks\n                }\n            };\n            list_add(writes, difference_write);\n        }\n    }\n    if (!list_length_is_0(writes)) {\n        let when = new Date().toISOString();\n        let commit_id = guid_generate();\n        let commit = {\n            commit_id,\n            when,\n            [version_property_parts()]: parts,\n            data: commit_data\n        };\n        let parsed = await version_commits_get(repository_name);\n        let max = list_max_or_0(parsed);\n        let version = add_1(max);\n        let repository_sub_path = version_path_commits_get(repository_name);\n        let commit_path = path_join([\n            repository_sub_path,\n            file_name_json(version)\n        ]);\n        let commit_write = {\n            [property_file_path]: commit_path,\n            [property_contents]: commit\n        };\n        list_add(writes, commit_write);\n    }\n    return writes;\n}"
 ]
}