{
 "file_path": "src\\git\\pacp\\with\\message.mjs",
 "part_id": "817f925e-b392-495c-a479-ffb51811f0c2",
 "hunks": [
  "0+import { git_commands_sync_add_run } from '../../commands/sync/add/run.mjs';\nimport { log } from '../../../log.mjs';\nimport { arguments_assert } from '../../../arguments/assert.mjs';\nimport { metadata } from '../../../metadata.mjs';\nimport { function_name_get } from '../../../function/name/get.mjs';\nimport { list_remove_all_first_equals } from '../../../list/remove/all/first/equals.mjs';\nimport { git } from '../../../git.mjs';\nimport { list_join } from '../../../list/join.mjs';\nimport { command_line_args_skipped } from '../../../command/line/args/skipped.mjs';\nimport { result_empty } from '../../../result/empty.mjs';\nimport { string_is } from '../../../string/is.mjs';\nimport { boolean_is } from '../../../boolean/is.mjs';\nexport async function git_pacp_with_message(commit_message, sync) {\n    arguments_assert(arguments, [\n        string_is,\n        boolean_is\n    ]);\n    let args = command_line_args_skipped();\n    list_remove_all_first_equals(args, function_name_get(git));\n    let args_message = list_join(args, ' ');\n    const command_commit = `git commit -m \"${ commit_message } ${ args_message }\"`;\n    let commands = [\n        `git add *`,\n        command_commit\n    ];\n    let c_result = await git_commands_sync_add_run(sync, commands);\n    if (!c_result.success) {\n        if (c_result.command === command_commit) {\n            let result = result_empty();\n            result.inner = c_result;\n            result.message = `There was probably no code to commit. If this is not true, fix the code!`;\n            return result;\n        } else {\n            log({\n                c_result,\n                command_commit\n            });\n        }\n    }\n    return c_result;\n    metadata([]);\n}"
 ]
}