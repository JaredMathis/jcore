{
 "file_path": "src\\git\\ignore\\add.mjs",
 "part_id": "602a42f0-f797-492e-b833-3051eab4c617",
 "hunks": [
  "0+import { git_ignore_lines } from './lines.mjs';\nimport { git_ignore_path } from './path.mjs';\nimport { arguments_assert_todo } from '../../arguments/assert/todo.mjs';\nimport { arguments_assert } from '../../arguments/assert.mjs';\nimport { file_overwrite } from '../../file/overwrite.mjs';\nimport { list_join } from '../../list/join.mjs';\nimport { list_add_if_not_exists } from '../../list/add/if/not/exists.mjs';\nimport { string_trim } from '../../string/trim.mjs';\nimport { list_map } from '../../list/map.mjs';\nimport { string_new_line } from '../../string/new/line.mjs';\nexport async function git_ignore_add(gitignore_line_to_add) {\n    arguments_assert(arguments, [arguments_assert_todo]);\n    let gitignore_lines = await git_ignore_lines();\n    let gitignore_file_path = git_ignore_path();\n    let mapped = list_map(gitignore_lines, string_trim);\n    list_add_if_not_exists(mapped, gitignore_line_to_add);\n    let gitignore_contents_new = list_join(mapped, string_new_line());\n    await file_overwrite(gitignore_file_path, gitignore_contents_new);\n}"
 ]
}