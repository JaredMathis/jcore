{
 "file_path": "src\\js\\import\\all\\with\\function\\names.mjs",
 "part_id": "ee051dc7-6ed4-4ba8-bdb9-a2ae0dd2909c",
 "hunks": [
  "0+import { js_node_is_program } from '../../../../node/is/program.mjs';\nimport { arguments_assert } from '../../../../../arguments/assert.mjs';\nimport { metadata } from '../../../../../metadata.mjs';\nimport { list_add } from '../../../../../list/add.mjs';\nimport { list_any } from '../../../../../list/any.mjs';\nimport { list_first } from '../../../../../list/first.mjs';\nimport { list_length_is_1 } from '../../../../../list/length/is/1.mjs';\nimport { list_map } from '../../../../../list/map.mjs';\nimport { function_name_all } from '../../../../../function/name/all.mjs';\nimport { object_property_get } from '../../../../../object/property/get.mjs';\nimport { js_node_is_identifier } from '../../../../node/is/identifier.mjs';\nimport { js_node_is_import_specifier } from '../../../../node/is/import/specifier.mjs';\nimport { js_node_is_literal } from '../../../../node/is/literal.mjs';\nimport { js_import_all } from '../../../all.mjs';\nimport { list_contains } from '../../../../../list/contains.mjs';\nimport { js_node_property_source } from '../../../../node/property/source.mjs';\nexport async function js_import_all_with_function_names(parsed) {\n    arguments_assert(arguments, [js_node_is_program]);\n    let function_names = await function_name_all();\n    let import_all = js_import_all(parsed);\n    let import_name_all = [];\n    for (let i of import_all) {\n        let source = object_property_get(i, js_node_property_source());\n        if (!js_node_is_literal(source)) {\n            continue;\n        }\n        let specifiers = object_property_get(i, 'specifiers');\n        if (!list_length_is_1(specifiers)) {\n            continue;\n        }\n        let specifier = list_first(specifiers);\n        if (!js_node_is_import_specifier(specifier)) {\n            continue;\n        }\n        let properties = [\n            'imported',\n            'local'\n        ];\n        let values = list_map(properties, p => object_property_get(specifier, p));\n        if (list_any(values, v => !js_node_is_identifier(v))) {\n            continue;\n        }\n        let first = list_first(values);\n        let first_name = object_property_get(first, 'name');\n        if (list_any(values, v => object_property_get(v, 'name') !== first_name)) {\n            continue;\n        }\n        if (!list_contains(function_names, first_name)) {\n            continue;\n        }\n        list_add(import_name_all, {\n            name: first_name,\n            import: i\n        });\n    }\n    return import_name_all;\n    metadata([]);\n}"
 ]
}