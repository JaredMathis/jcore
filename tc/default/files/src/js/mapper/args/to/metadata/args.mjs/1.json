{
 "file_path": "src\\js\\mapper\\args\\to\\metadata\\args.mjs",
 "part_id": "1f20084c-2a76-4bfb-94f9-7a7037891312",
 "hunks": [
  "0+import { defined_is } from '../../../../../defined/is.mjs';\nimport { arguments_assert } from '../../../../../arguments/assert.mjs';\nimport { js_statement_metadata_is } from '../../../../statement/metadata/is.mjs';\nimport { refactor_metadata_missing_add } from '../../../../../refactor/metadata/missing/add.mjs';\nimport { list_length_is_0 } from '../../../../../list/length/is/0.mjs';\nimport { js_function_delcaration_to_statements } from '../../../../function/delcaration/to/statements.mjs';\nimport { js_statement_metadata_args_get } from '../../../../statement/metadata/args/get.mjs';\nimport { list_last } from '../../../../../list/last.mjs';\nexport async function js_mapper_args_to_metadata_args(args) {\n    arguments_assert(arguments, [defined_is]);\n    let {function_declaration} = args;\n    let statements = js_function_delcaration_to_statements(function_declaration);\n    let missing = false;\n    if (list_length_is_0(statements)) {\n        missing = true;\n    } else {\n        let last_statement = list_last(statements);\n        if (!js_statement_metadata_is(last_statement)) {\n            missing = true;\n        }\n    }\n    if (missing) {\n        await refactor_metadata_missing_add(args);\n    }\n    let statements2 = js_function_delcaration_to_statements(function_declaration);\n    let last_statement2 = list_last(statements2);\n    let metadata_args = js_statement_metadata_args_get(last_statement2);\n    return metadata_args;\n}"
 ]
}