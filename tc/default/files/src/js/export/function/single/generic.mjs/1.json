{
 "file_path": "src\\js\\export\\function\\single\\generic.mjs",
 "part_id": "f47de23b-b6d2-4e00-9f92-bf1087424df6",
 "hunks": [
  "0+import { js_node_is_program } from '../../../node/is/program.mjs';\nimport { arguments_assert } from '../../../../arguments/assert.mjs';\nimport { metadata } from '../../../../metadata.mjs';\nimport { value_get } from '../../../../value/get.mjs';\nimport { list_single } from '../../../../list/single.mjs';\nimport { value_set_is } from '../../../../value/set/is.mjs';\nimport { value_set } from '../../../../value/set.mjs';\nimport { js_exports } from '../../../exports.mjs';\nimport { value_new } from '../../../../value/new.mjs';\nimport { js_export_declaration_get } from '../../declaration/get.mjs';\nimport { js_node_is_function_declaration } from '../../../node/is/function/declaration.mjs';\nimport { error } from '../../../../error.mjs';\nimport { list_map } from '../../../../list/map.mjs';\nimport { js_function_declaration_to_name } from '../../../function/declaration/to/name.mjs';\nimport { list_length_multiple } from '../../../../list/length/multiple.mjs';\nimport { list_length_is_0 } from '../../../../list/length/is/0.mjs';\nimport { boolean_is } from '../../../../boolean/is.mjs';\nexport function js_export_function_single_generic(parsed, or_null) {\n    arguments_assert(arguments, [\n        js_node_is_program,\n        boolean_is\n    ]);\n    let result = value_new();\n    let exports_existing = js_exports(parsed);\n    if (or_null) {\n        if (list_length_is_0(exports_existing)) {\n            value_set(result, null);\n        }\n        if (list_length_multiple(exports_existing)) {\n            let names = list_map(exports_existing, e => {\n                const declaration = js_export_declaration_get(e);\n                let name = js_function_declaration_to_name(declaration);\n                return name;\n            });\n            error(`Multiple exports? Look into this: ` + names);\n        }\n    }\n    if (!value_set_is(result)) {\n        const export_single = list_single(exports_existing);\n        const declaration = js_export_declaration_get(export_single);\n        if (js_node_is_function_declaration(declaration)) {\n            value_set(result, declaration);\n        }\n    }\n    return value_get(result);\n    metadata([]);\n}"
 ]
}