{
 "file_path": "src\\file\\js\\all\\identifier\\multiple\\rename.mjs",
 "part_id": "13083e8c-987a-437d-894a-6ece5db4f153",
 "hunks": [
  "0+import { list_add_property } from '../../../../../list/add/property.mjs';\nimport { defined_is } from '../../../../../defined/is.mjs';\nimport { arguments_assert } from '../../../../../arguments/assert.mjs';\nimport { metadata } from '../../../../../metadata.mjs';\nimport { js_identifier_multiple_rename } from '../../../../../js/identifier/multiple/rename.mjs';\nimport { file_js_all_map_args } from '../../map/args.mjs';\nimport { list_unique_is } from '../../../../../list/unique/is.mjs';\nimport { list_multiple_combine } from '../../../../../list/multiple/combine.mjs';\nimport { object_properties } from '../../../../../object/properties.mjs';\nimport { object_keys } from '../../../../../object/keys.mjs';\nimport { assert } from '../../../../../assert.mjs';\nexport async function file_js_all_identifier_multiple_rename(dictionary) {\n    arguments_assert(arguments, [defined_is]);\n    let keys = object_keys(dictionary);\n    let values = object_properties(dictionary);\n    const concats = [\n        keys,\n        values\n    ];\n    let concat = list_multiple_combine(concats);\n    assert(list_unique_is(concat));\n    let file_paths_changed = [];\n    await file_js_all_map_args(function mapper(args) {\n        let changed = js_identifier_multiple_rename(dictionary, args);\n        if (changed) {\n            list_add_property(file_paths_changed, args, 'file_path');\n        }\n    });\n    return file_paths_changed;\n    metadata([]);\n}"
 ]
}