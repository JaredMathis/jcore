{
 "file_path": "src\\file\\js\\dependencies\\non\\recursive.mjs",
 "part_id": "db54dfaa-9164-4559-862e-1238097d4ef1",
 "hunks": [
  "0+import { path_is } from '../../../../path/is.mjs';\nimport { arguments_assert } from '../../../../arguments/assert.mjs';\nimport { string_starts_with } from '../../../../string/starts/with.mjs';\nimport { metadata } from '../../../../metadata.mjs';\nimport { directory_current } from '../../../../directory/current.mjs';\nimport { path_relative } from '../../../../path/relative.mjs';\nimport { path_resolve } from '../../../../path/resolve.mjs';\nimport { path_parent } from '../../../../path/parent.mjs';\nimport { path_join } from '../../../../path/join.mjs';\nimport { js_node_property_value } from '../../../../js/node/property/value.mjs';\nimport { js_node_property_source } from '../../../../js/node/property/source.mjs';\nimport { object_property_get } from '../../../../object/property/get.mjs';\nimport { list_map } from '../../../../list/map.mjs';\nimport { js_import_all } from '../../../../js/import/all.mjs';\nimport { file_js_parse } from '../../parse.mjs';\nimport { list_filter } from '../../../../list/filter.mjs';\nexport async function file_js_dependencies_non_recursive(file_path) {\n    arguments_assert(arguments, [path_is]);\n    let parsed = await file_js_parse(file_path);\n    let imports = js_import_all(parsed);\n    let mapped = list_map(imports, i => {\n        let source = object_property_get(i, js_node_property_source());\n        let path_relative_to_file_path = object_property_get(source, js_node_property_value());\n        return path_relative_to_file_path;\n    });\n    let filtered = list_filter(mapped, p => {\n        return string_starts_with(p, directory_current());\n    });\n    let mapped2 = list_map(filtered, path_relative_to_file_path => {\n        let path_full = path_join([\n            path_parent(file_path),\n            path_relative_to_file_path\n        ]);\n        let resolved = path_resolve(path_full);\n        let path_relative_to_current = path_relative(directory_current(), resolved);\n        return path_relative_to_current;\n    });\n    return mapped2;\n    metadata([]);\n}"
 ]
}