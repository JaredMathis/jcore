{
 "file_path": "src\\tests\\name\\next.mjs",
 "part_id": "3b435254-a729-40e4-a7a8-b2317624319f",
 "hunks": [
  "0+import { string_starts_with } from '../../string/starts/with.mjs';\nimport { arguments_assert } from '../../arguments/assert.mjs';\nimport { function_tests_prefix_get } from '../../function/tests/prefix/get.mjs';\nimport { add_1 } from '../../add/1.mjs';\nimport { list_max_or_0 } from '../../list/max/or/0.mjs';\nimport { integer_parse } from '../../integer/parse.mjs';\nimport { integer_parsable } from '../../integer/parsable.mjs';\nimport { list_filter } from '../../list/filter.mjs';\nimport { string_function_name_to_tests_id } from '../../string/function/name/to/tests/id.mjs';\nimport { list_map } from '../../list/map.mjs';\nimport { function_name_all } from '../../function/name/all.mjs';\nimport { string_identifier_is } from '../../string/identifier/is.mjs';\nexport async function tests_name_next(function_name) {\n    arguments_assert(arguments, [string_identifier_is]);\n    let functions_all = await function_name_all();\n    const prefix = function_tests_prefix_get(function_name);\n    let function_name_tests = list_filter(functions_all, f => string_starts_with(f, prefix));\n    let tests_ids_all = list_map(function_name_tests, t => {\n        return string_function_name_to_tests_id(function_name, t);\n    });\n    let tests_ids_all_numeric = list_filter(tests_ids_all, id => {\n        return integer_parsable(id);\n    });\n    let test_ids_all_number = list_map(tests_ids_all_numeric, integer_parse);\n    let max = list_max_or_0(test_ids_all_number);\n    let test_ids_all_number_max = add_1(max);\n    let test_name = `${ function_tests_prefix_get(function_name) }${ test_ids_all_number_max }`;\n    return test_name;\n}"
 ]
}