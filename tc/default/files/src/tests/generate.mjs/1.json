{
 "file_path": "src\\tests\\generate.mjs",
 "part_id": "eebe0779-e383-47ee-bd0c-5a6d51e1185f",
 "hunks": [
  "0+import { arguments_assert } from '../arguments/assert.mjs';\nimport { metadata } from '../metadata.mjs';\nimport { js_code_call_expression_statement } from '../js/code/call/expression/statement.mjs';\nimport { log } from '../log.mjs';\nimport { function_name_get } from '../function/name/get.mjs';\nimport { refactor_import_fix } from '../refactor/import/fix.mjs';\nimport { function_map } from '../function/map.mjs';\nimport { function_add_with_statements_synchronized } from '../function/add/with/statements/synchronized.mjs';\nimport { file_delete } from '../file/delete.mjs';\nimport { file_exists } from '../file/exists.mjs';\nimport { js_parse_statements } from '../js/parse/statements.mjs';\nimport { string_new_line } from '../string/new/line.mjs';\nimport { list_join } from '../list/join.mjs';\nimport { list_map } from '../list/map.mjs';\nimport { function_all_tests } from '../function/all/tests.mjs';\nimport { function_name_to_file_path } from '../function/name/to/file/path.mjs';\nimport { list_add } from '../list/add.mjs';\nimport { list_length } from '../list/length.mjs';\nexport async function tests_generate() {\n    arguments_assert(arguments, []);\n    let function_name = 'tests';\n    let file_path = function_name_to_file_path(function_name);\n    let test_names = await function_all_tests();\n    let mapped = list_map(test_names, n => `await ${ js_code_call_expression_statement(n) }`);\n    list_add(mapped, `${ function_name_get(log) }(${ list_length(mapped) } + ' tests ran successfully')`);\n    let code = list_join(mapped, string_new_line());\n    let statements = js_parse_statements(code);\n    if (await file_exists(file_path)) {\n        await file_delete(file_path);\n    }\n    let is_async = true;\n    await function_add_with_statements_synchronized(function_name, statements, is_async);\n    await function_map(function_name_get(refactor_import_fix), function_name);\n    metadata([]);\n}"
 ]
}