{
 "file_path": "src\\function\\rename\\without\\all\\refactor.mjs",
 "part_id": "e71f43e9-cbdf-4b56-bd14-84b41af6c014",
 "hunks": [
  "0+import { list_to_dictionary } from '../../../../list/to/dictionary.mjs';\nimport { string_starts_with } from '../../../../string/starts/with.mjs';\nimport { list_filter } from '../../../../list/filter.mjs';\nimport { function_tests_prefix_get } from '../../../tests/prefix/get.mjs';\nimport { function_rename_file_path } from '../../file/path.mjs';\nimport { function_name_all } from '../../../name/all.mjs';\nimport { string_identifier_is } from '../../../../string/identifier/is.mjs';\nimport { arguments_assert } from '../../../../arguments/assert.mjs';\nimport { metadata } from '../../../../metadata.mjs';\nimport { file_js_all_identifier_exists } from '../../../../file/js/all/identifier/exists.mjs';\nimport { function_exists } from '../../../exists.mjs';\nimport { assert } from '../../../../assert.mjs';\nimport { string_prefix_replace } from '../../../../string/prefix/replace.mjs';\nimport { object_property_get } from '../../../../object/property/get.mjs';\nimport { object_keys } from '../../../../object/keys.mjs';\nimport { object_properties } from '../../../../object/properties.mjs';\nexport async function function_rename_without_all_refactor(function_name_old, function_name_new) {\n    arguments_assert(arguments, [\n        string_identifier_is,\n        string_identifier_is\n    ]);\n    assert(await function_exists(function_name_old));\n    assert(!await function_exists(function_name_new));\n    assert(!await file_js_all_identifier_exists(function_name_new));\n    let all = await function_name_all();\n    let tests_prefix_old = function_tests_prefix_get(function_name_old);\n    let tests_old = list_filter(all, a => string_starts_with(a, tests_prefix_old));\n    let tests_prefix_new = function_tests_prefix_get(function_name_new);\n    let tests_renames = list_to_dictionary(tests_old, t => string_prefix_replace(t, tests_prefix_old, tests_prefix_new));\n    for (let to of object_properties(tests_renames)) {\n        assert(!await function_exists(to));\n    }\n    await function_rename_file_path(function_name_old, function_name_new);\n    for (let from of object_keys(tests_renames)) {\n        let to = object_property_get(tests_renames, from);\n        await function_rename_file_path(from, to);\n    }\n    return tests_renames;\n    metadata([]);\n}"
 ]
}