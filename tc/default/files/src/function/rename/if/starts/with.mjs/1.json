{
 "file_path": "src\\function\\rename\\if\\starts\\with.mjs",
 "part_id": "dbba990a-e8b9-41f1-9489-58519f707dfa",
 "hunks": [
  "0+import { function_rename_after } from '../../after.mjs';\nimport { string_identifier_sub_is } from '../../../../string/identifier/sub/is.mjs';\nimport { list_to_dictionary_async } from '../../../../list/to/dictionary/async.mjs';\nimport { arguments_assert } from '../../../../arguments/assert.mjs';\nimport { metadata } from '../../../../metadata.mjs';\nimport { file_js_all_identifier_multiple_rename } from '../../../../file/js/all/identifier/multiple/rename.mjs';\nimport { function_rename_without_all_refactor } from '../../without/all/refactor.mjs';\nimport { string_prefix_replace } from '../../../../string/prefix/replace.mjs';\nimport { string_starts_with } from '../../../../string/starts/with.mjs';\nimport { function_name_all } from '../../../name/all.mjs';\nimport { list_filter } from '../../../../list/filter.mjs';\nimport { object_merge } from '../../../../object/merge.mjs';\nexport async function function_rename_if_starts_with(prefix_old, prefix_new) {\n    arguments_assert(arguments, [\n        string_identifier_sub_is,\n        string_identifier_sub_is\n    ]);\n    let names = await function_name_all();\n    let names_filtered = list_filter(names, n => string_starts_with(n, prefix_old));\n    let dictionary_tests = {};\n    let dictionary = await list_to_dictionary_async(names_filtered, key_to_value);\n    async function key_to_value(n_old) {\n        let n_new = string_prefix_replace(n_old, prefix_old, prefix_new);\n        let tests_renames = await function_rename_without_all_refactor(n_old, n_new);\n        object_merge(tests_renames, dictionary_tests);\n        return n_new;\n    }\n    object_merge(dictionary_tests, dictionary);\n    let file_paths_changed = await file_js_all_identifier_multiple_rename(dictionary);\n    await function_rename_after(file_paths_changed);\n    metadata([]);\n}"
 ]
}