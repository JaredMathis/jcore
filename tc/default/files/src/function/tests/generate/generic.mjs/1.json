{
 "file_path": "src\\function\\tests\\generate\\generic.mjs",
 "part_id": "37828008-849d-405a-b305-845064855c33",
 "hunks": [
  "0+import { function_tests_generate_generic_each } from './generic/each.mjs';\nimport { arguments_assert_todo } from '../../../arguments/assert/todo.mjs';\nimport { arguments_assert } from '../../../arguments/assert.mjs';\nimport { list_add } from '../../../list/add.mjs';\nimport { list_contains } from '../../../list/contains.mjs';\nimport { json_to } from '../../../json/to.mjs';\nimport { list_random_item } from '../../../list/random/item.mjs';\nimport { function_name_separator } from '../../name/separator.mjs';\nimport { string_function_tests_sub } from '../../../string/function/tests/sub.mjs';\nimport { range } from '../../../range.mjs';\nimport { log } from '../../../log.mjs';\nimport { function_run } from '../../run.mjs';\nimport { list_to_dictionary_async } from '../../../list/to/dictionary/async.mjs';\nimport { function_exists } from '../../exists.mjs';\nimport { list_any_async } from '../../../list/any/async.mjs';\nimport { list_unique } from '../../../list/unique.mjs';\nimport { function_name_to_tests_values } from '../../name/to/tests/values.mjs';\nimport { list_map } from '../../../list/map.mjs';\nimport { js_mapper_args_to_statement_arguments_assert_args_predicate } from '../../../js/mapper/args/to/statement/arguments/assert/args/predicate.mjs';\nimport { js_keyword_async } from '../../../js/keyword/async.mjs';\nimport { object_property_get } from '../../../object/property/get.mjs';\nimport { assert } from '../../../assert.mjs';\nimport { comment } from '../../../comment.mjs';\nimport { js_exported_function_declaration_single } from '../../../js/exported/function/declaration/single.mjs';\nimport { function_parse } from '../../parse.mjs';\nimport { function_tests_count } from '../count.mjs';\nexport async function function_tests_generate_generic(function_name) {\n    arguments_assert(arguments, [arguments_assert_todo]);\n    let tests_count = await function_tests_count(function_name);\n    if (tests_count > 0) {\n        return;\n    }\n    let parsed = await function_parse(function_name);\n    let function_declaration = js_exported_function_declaration_single(parsed);\n    comment(`To generate code for an async function this code needs changing`);\n    assert(!object_property_get(function_declaration, js_keyword_async()));\n    let predicate = await js_mapper_args_to_statement_arguments_assert_args_predicate(function_declaration);\n    let predicate_names = list_map(predicate, p => object_property_get(p, 'name'));\n    let names_with_endings = list_map(predicate_names, n => {\n        return function_name_to_tests_values(n);\n    });\n    let names_with_endings_unqiue = list_unique(names_with_endings);\n    if (await list_any_async(names_with_endings_unqiue, async n => !await function_exists(n))) {\n        return;\n    }\n    let dictionary = await list_to_dictionary_async(names_with_endings_unqiue, async key => {\n        return await function_run(key, []);\n    });\n    let args_so_far = [];\n    let tries = 100;\n    let count = 10;\n    let count_error_max = 2;\n    let count_error = 0;\n    log(function_name);\n    for (let i of range(count)) {\n        let test_name = function_name + string_function_tests_sub() + 'generated' + function_name_separator() + (i + 1);\n        for (let j of range(tries)) {\n            let args = list_map(predicate_names, n => {\n                let key = function_name_to_tests_values(n);\n                let d = object_property_get(dictionary, key);\n                let value = list_random_item(d);\n                return value;\n            });\n            let args_json = json_to(args);\n            if (list_contains(args_so_far, args_json)) {\n                continue;\n            }\n            list_add(args_so_far, args_json);\n            await function_tests_generate_generic_each(function_name, test_name, args, () => {\n                count_error++;\n                if (count_error > count_error_max) {\n                    return true;\n                }\n            });\n            break;\n        }\n    }\n}"
 ]
}