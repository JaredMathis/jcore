{
 "file_path": "src\\function\\arguments\\assert\\default\\generic.mjs",
 "part_id": "291bb336-589b-4db2-998b-d0f79b0bb98d",
 "hunks": [
  "0+import { object_property_exists } from '../../../../object/property/exists.mjs';\nimport { tautology } from '../../../../tautology.mjs';\nimport { js_identifier_counts } from '../../../../js/identifier/counts.mjs';\nimport { arguments_assert } from '../../../../arguments/assert.mjs';\nimport { function_name_get } from '../../../name/get.mjs';\nimport { equal } from '../../../../equal.mjs';\nimport { assert } from '../../../../assert.mjs';\nimport { js_find_call_expressions_to_name } from '../../../../js/find/call/expressions/to/name.mjs';\nimport { js_statement_expression_to_expression } from '../../../../js/statement/expression/to/expression.mjs';\nimport { js_function_delcaration_to_statement_first } from '../../../../js/function/delcaration/to/statement/first.mjs';\nimport { js_export_function_single } from '../../../../js/export/function/single.mjs';\nimport { js_mapper_args_to_statement_arguments_assert } from '../../../../js/mapper/args/to/statement/arguments/assert.mjs';\nimport { list_contains } from '../../../../list/contains.mjs';\nimport { function_names_each_filter } from '../../../names/each/filter.mjs';\nimport { refactor_functions_arguments_assert_missing_add_excludes } from '../../../../refactor/functions/arguments/assert/missing/add/excludes.mjs';\nimport { function_is } from '../../../is.mjs';\nimport { todo } from '../../../../todo.mjs';\nimport { arguments_assert_todo } from '../../../../arguments/assert/todo.mjs';\nexport async function function_arguments_assert_default_generic(on_equals) {\n    arguments_assert(arguments, [function_is]);\n    let excludes = await refactor_functions_arguments_assert_missing_add_excludes();\n    await function_names_each_filter(logic, function_name => {\n        let result = !list_contains(excludes, function_name);\n        return result;\n    });\n    async function logic(args) {\n        let {parsed, function_name} = args;\n        await js_mapper_args_to_statement_arguments_assert(args);\n        let function_declaration = js_export_function_single(parsed);\n        let statement_first = js_function_delcaration_to_statement_first(function_declaration);\n        let expression = js_statement_expression_to_expression(statement_first);\n        let name_actual = js_find_call_expressions_to_name(expression);\n        assert(equal(name_actual, function_name_get(arguments_assert)));\n        let counts = js_identifier_counts(expression);\n        todo(`Maybe this should be ${ arguments_assert_todo } not ${ tautology }`);\n        let property_name = function_name_get(tautology);\n        if (object_property_exists(counts, property_name)) {\n            return await on_equals(function_name);\n        }\n    }\n}"
 ]
}