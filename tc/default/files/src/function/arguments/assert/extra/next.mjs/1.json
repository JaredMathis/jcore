{
 "file_path": "src\\function\\arguments\\assert\\extra\\next.mjs",
 "part_id": "e01f01ef-77dc-48dc-a996-b33c1c03feb8",
 "hunks": [
  "0+import { list_length_multiple } from '../../../../list/length/multiple.mjs';\nimport { js_call_expressions_named } from '../../../../js/call/expressions/named.mjs';\nimport { metadata_arguments_assert_extra_allow } from '../../../../metadata/arguments/assert/extra/allow.mjs';\nimport { function_open_vs_code } from '../../../open/vs/code.mjs';\nimport { function_name_get } from '../../../name/get.mjs';\nimport { function_names_each } from '../../../names/each.mjs';\nimport { arguments_assert } from '../../../../arguments/assert.mjs';\nimport { js_node_is_call_expression } from '../../../../js/node/is/call/expression.mjs';\nimport { js_mapper_args_to_metadata_args } from '../../../../js/mapper/args/to/metadata/args.mjs';\nimport { list_map } from '../../../../list/map.mjs';\nimport { js_call_expression_to_name_or_null } from '../../../../js/call/expression/to/name/or/null.mjs';\nimport { list_contains } from '../../../../list/contains.mjs';\nimport { list_filter } from '../../../../list/filter.mjs';\nexport async function function_arguments_assert_extra_next() {\n    arguments_assert(arguments, []);\n    let result = null;\n    await function_names_each(logic);\n    async function logic(args) {\n        let {parsed, function_name} = args;\n        let metadata_args = await js_mapper_args_to_metadata_args(args);\n        let filtered = list_filter(metadata_args, js_node_is_call_expression);\n        let mapped = list_map(filtered, js_call_expression_to_name_or_null);\n        if (list_contains(mapped, function_name_get(metadata_arguments_assert_extra_allow))) {\n            return;\n        }\n        const name_expected = function_name_get(arguments_assert);\n        let matches = js_call_expressions_named(parsed, name_expected);\n        if (list_length_multiple(matches)) {\n            function_open_vs_code(function_name);\n            result = function_name;\n            return true;\n        }\n    }\n    return result;\n}"
 ]
}