{
 "file_path": "src\\function\\callers\\arguments\\assert\\auto\\generic.mjs",
 "part_id": "6c300721-38a7-409f-97ae-c8c116766246",
 "hunks": [
  "0+import { js_node_property_end } from '../../../../../js/node/property/end.mjs';\nimport { js_node_property_start } from '../../../../../js/node/property/start.mjs';\nimport { function_map_args } from '../../../../map/args.mjs';\nimport { list_is } from '../../../../../list/is.mjs';\nimport { json_equal_keys_without } from '../../../../../json/equal/keys/without.mjs';\nimport { list_each_with_index } from '../../../../../list/each/with/index.mjs';\nimport { comment } from '../../../../../comment.mjs';\nimport { list_add_if_not_exists } from '../../../../../list/add/if/not/exists.mjs';\nimport { arguments_assert } from '../../../../../arguments/assert.mjs';\nimport { refactor_import_fix } from '../../../../../refactor/import/fix.mjs';\nimport { list_set } from '../../../../../list/set.mjs';\nimport { list_get } from '../../../../../list/get.mjs';\nimport { js_node_property_arguments } from '../../../../../js/node/property/arguments.mjs';\nimport { js_call_expression_to_name_or_null } from '../../../../../js/call/expression/to/name/or/null.mjs';\nimport { js_node_is_call_expression } from '../../../../../js/node/is/call/expression.mjs';\nimport { js_node_property_left } from '../../../../../js/node/property/left.mjs';\nimport { js_node_is_assignment_expression } from '../../../../../js/node/is/assignment/expression.mjs';\nimport { js_visit_nodes } from '../../../../../js/visit/nodes.mjs';\nimport { arguments_assert_predicate_default } from '../../../../../arguments/assert/predicate/default.mjs';\nimport { function_name_get } from '../../../../name/get.mjs';\nimport { js_node_property_name } from '../../../../../js/node/property/name.mjs';\nimport { js_node_is_identifier } from '../../../../../js/node/is/identifier.mjs';\nimport { assert } from '../../../../../assert.mjs';\nimport { list_each_with_index_async } from '../../../../../list/each/with/index/async.mjs';\nimport { js_mapper_args_to_statement_arguments_assert_args_predicate } from '../../../../../js/mapper/args/to/statement/arguments/assert/args/predicate.mjs';\nimport { list_length_is_0 } from '../../../../../list/length/is/0.mjs';\nimport { js_node_property_params } from '../../../../../js/node/property/params.mjs';\nimport { object_property_get } from '../../../../../object/property/get.mjs';\nimport { equal } from '../../../../../equal.mjs';\nimport { string_identifier_is } from '../../../../../string/identifier/is.mjs';\ncomment(`Simplify this function - I don't understand it fully to guarantee it works through logical proof`);\nexport async function function_callers_arguments_assert_auto_generic(c_function_name, function_name, arguments_assert_args, result) {\n    arguments_assert(arguments, [\n        string_identifier_is,\n        string_identifier_is,\n        list_is,\n        list_is\n    ]);\n    if (equal(function_name, c_function_name)) {\n        return;\n    }\n    await function_map_args(c_function_name, mapper);\n    async function mapper(c_args) {\n        let c_parsed = object_property_get(c_args, 'parsed');\n        let c_function_declaration = object_property_get(c_args, 'function_declaration');\n        let c_params = object_property_get(c_function_declaration, js_node_property_params());\n        if (list_length_is_0(c_params)) {\n            return true;\n        }\n        let c_arguments_assert_args = await js_mapper_args_to_statement_arguments_assert_args_predicate(c_function_declaration);\n        await list_each_with_index_async(c_arguments_assert_args, async function lambda(c_arg, c_arg_index) {\n            let c_param = list_get(c_params, c_arg_index);\n            let c_param_name = object_property_get(c_param, js_node_property_name());\n            comment(`If this isn't true then this code needs changing`);\n            assert(js_node_is_identifier(c_arg));\n            let c_predicate_name = object_property_get(c_arg, js_node_property_name());\n            let default_name = function_name_get(arguments_assert_predicate_default());\n            if (!equal(c_predicate_name, default_name)) {\n                return false;\n            }\n            let changed = false;\n            let assignment_exists = false;\n            js_visit_nodes(c_parsed, js_node_is_assignment_expression, v => {\n                let {node} = v;\n                let left = object_property_get(node, js_node_property_left());\n                if (js_node_is_identifier(left)) {\n                    if (object_property_get(left, 'name') === c_predicate_name) {\n                        comment(`Value has been changed - will not assume predicate can be copied`);\n                        assignment_exists = true;\n                    }\n                }\n            });\n            if (assignment_exists === true) {\n                return changed;\n            }\n            js_visit_nodes(c_parsed, js_node_is_call_expression, v => {\n                let {node} = v;\n                let c_ce_name = js_call_expression_to_name_or_null(node);\n                if (c_ce_name !== null) {\n                    if (equal(c_ce_name, function_name)) {\n                        let ce_args = object_property_get(node, js_node_property_arguments());\n                        list_each_with_index(ce_args, (ce_arg, ce_arg_index) => {\n                            if (!js_node_is_identifier(ce_arg)) {\n                                return;\n                            }\n                            const ce_arg_name = object_property_get(ce_arg, 'name');\n                            if (!equal(c_param_name, ce_arg_name)) {\n                                return;\n                            }\n                            if (ce_arg !== null) {\n                                let arguments_assert_arg = list_get(arguments_assert_args, ce_arg_index);\n                                let c_arguments_assert_arg = list_get(c_arguments_assert_args, c_arg_index);\n                                let identical = json_equal_keys_without(arguments_assert_arg, c_arguments_assert_arg, [\n                                    js_node_property_start(),\n                                    js_node_property_end()\n                                ]);\n                                if (!identical) {\n                                    list_set(c_arguments_assert_args, c_arg_index, arguments_assert_arg);\n                                    changed = true;\n                                }\n                            }\n                        });\n                    }\n                }\n            });\n            if (changed) {\n                await refactor_import_fix(c_args);\n                list_add_if_not_exists(result, c_function_name);\n            }\n            return !changed;\n        });\n    }\n}"
 ]
}