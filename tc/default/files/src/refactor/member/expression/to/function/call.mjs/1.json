{
 "file_path": "src\\refactor\\member\\expression\\to\\function\\call.mjs",
 "part_id": "f01a6f30-b36e-4eaa-8453-49acac280351",
 "hunks": [
  "0+import { defined_is } from '../../../../../defined/is.mjs';\nimport { arguments_assert } from '../../../../../arguments/assert.mjs';\nimport { function_auto_after_refactors_invoke } from '../../../../../function/auto/after/refactors/invoke.mjs';\nimport { js_parse_call_expression } from '../../../../../js/parse/call/expression.mjs';\nimport { js_node_property_arguments } from '../../../../../js/node/property/arguments.mjs';\nimport { metadata } from '../../../../../metadata.mjs';\nimport { js_node_property_name } from '../../../../../js/node/property/name.mjs';\nimport { object_replace } from '../../../../../object/replace.mjs';\nimport { function_name_get } from '../../../../../function/name/get.mjs';\nimport { object_property_get } from '../../../../../object/property/get.mjs';\nimport { js_visit_nodes } from '../../../../../js/visit/nodes.mjs';\nimport { js_node_is_member_expression } from '../../../../../js/node/is/member/expression.mjs';\nimport { list_add } from '../../../../../list/add.mjs';\nimport { js_node_is_identifier } from '../../../../../js/node/is/identifier.mjs';\nexport async function refactor_member_expression_to_function_call(args) {\n    arguments_assert(arguments, [defined_is]);\n    let changed = false;\n    let {parsed} = args;\n    js_visit_nodes(parsed, js_node_is_member_expression, v => {\n        let node = object_property_get(v, 'node');\n        let property = object_property_get(node, 'property');\n        if (!js_node_is_identifier(property)) {\n            return;\n        }\n        let property_name = object_property_get(property, js_node_property_name());\n        if (property_name !== 'name') {\n            return;\n        }\n        let object = object_property_get(node, 'object');\n        const name = function_name_get(function_name_get);\n        let expression = js_parse_call_expression(name);\n        object_replace(node, expression);\n        let node_args = object_property_get(node, js_node_property_arguments());\n        list_add(node_args, object);\n        changed = true;\n    });\n    if (changed) {\n        await function_auto_after_refactors_invoke(args);\n    }\n    metadata([]);\n}"
 ]
}