{
 "file_path": "src\\refactor\\metadata\\missing\\add.mjs",
 "part_id": "7f06a389-a43f-450b-bda3-21c30385d800",
 "hunks": [
  "0+import { js_code_call_expression_statement_with_args_code } from '../../../js/code/call/expression/statement/with/args/code.mjs';\nimport { defined_is } from '../../../defined/is.mjs';\nimport { arguments_assert } from '../../../arguments/assert.mjs';\nimport { refactor_import_fix } from '../../import/fix.mjs';\nimport { list_add } from '../../../list/add.mjs';\nimport { js_parse_statement } from '../../../js/parse/statement.mjs';\nimport { metadata } from '../../../metadata.mjs';\nimport { function_name_get } from '../../../function/name/get.mjs';\nimport { js_statement_if_metadata } from '../../../js/statement/if/metadata.mjs';\nimport { list_last } from '../../../list/last.mjs';\nimport { list_length_is_0 } from '../../../list/length/is/0.mjs';\nimport { js_function_delcaration_to_statements } from '../../../js/function/delcaration/to/statements.mjs';\nexport async function refactor_metadata_missing_add(args) {\n    arguments_assert(arguments, [defined_is]);\n    let {function_declaration} = args;\n    let already_exists = false;\n    let statements = js_function_delcaration_to_statements(function_declaration);\n    if (!list_length_is_0(statements)) {\n        let last_statement = list_last(statements);\n        js_statement_if_metadata(last_statement, function if_statement_metadata(last_statement, last_expression) {\n            already_exists = true;\n        });\n    }\n    if (!already_exists) {\n        const name = function_name_get(metadata);\n        const call_args = '[]';\n        let metadata_new_code = js_code_call_expression_statement_with_args_code(name, call_args);\n        let metadata_new = js_parse_statement(metadata_new_code);\n        list_add(statements, metadata_new);\n        await refactor_import_fix(args);\n    }\n}"
 ]
}