{
 "file_path": "src\\refactor\\arguments\\assert\\add\\no\\check.mjs",
 "part_id": "fbf60334-cbe0-4511-b62a-16a3f3316658",
 "hunks": [
  "0+import { js_code_call_expression_with_args } from '../../../../../js/code/call/expression/with/args.mjs';\nimport { list_is } from '../../../../../list/is.mjs';\nimport { js_node_is_function_declaration } from '../../../../../js/node/is/function/declaration.mjs';\nimport { js_node_property_params } from '../../../../../js/node/property/params.mjs';\nimport { arguments_assert_predicate_default } from '../../../../../arguments/assert/predicate/default.mjs';\nimport { list_contains } from '../../../../../list/contains.mjs';\nimport { js_function_declaration_to_name } from '../../../../../js/function/declaration/to/name.mjs';\nimport { comment } from '../../../../../comment.mjs';\nimport { list_add_beginning } from '../../../../../list/add/beginning.mjs';\nimport { arguments_assert } from '../../../../../arguments/assert.mjs';\nimport { js_parse_statement } from '../../../../../js/parse/statement.mjs';\nimport { js_keyword_arguments } from '../../../../../js/keyword/arguments.mjs';\nimport { list_join } from '../../../../../list/join.mjs';\nimport { function_name_get } from '../../../../../function/name/get.mjs';\nimport { range } from '../../../../../range.mjs';\nimport { list_map } from '../../../../../list/map.mjs';\nimport { list_length } from '../../../../../list/length.mjs';\nimport { object_property_get } from '../../../../../object/property/get.mjs';\nimport { js_function_delcaration_to_statements } from '../../../../../js/function/delcaration/to/statements.mjs';\nexport function refactor_arguments_assert_add_no_check(function_declaration, excludes) {\n    arguments_assert(arguments, [\n        js_node_is_function_declaration,\n        list_is\n    ]);\n    comment(`We want to skip dependencies of ${ function_name_get(arguments_assert) } or we will have recursion problems`);\n    let function_name = js_function_declaration_to_name(function_declaration);\n    if (list_contains(excludes, function_name)) {\n        return;\n    }\n    let statements = js_function_delcaration_to_statements(function_declaration);\n    let params = object_property_get(function_declaration, js_node_property_params());\n    let params_length = list_length(params);\n    let params_mapped = list_map(range(params_length), i => function_name_get(arguments_assert_predicate_default()));\n    let params_joined = list_join(params_mapped, ', ');\n    let params_code = `[${ params_joined }]`;\n    let params2 = [\n        js_keyword_arguments(),\n        params_code\n    ];\n    const call_expression_function_name = function_name_get(arguments_assert);\n    const statment_code = js_code_call_expression_with_args(call_expression_function_name, params2);\n    let statement_new = js_parse_statement(statment_code);\n    list_add_beginning(statements, statement_new);\n}"
 ]
}