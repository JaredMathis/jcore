{
 "file_path": "src\\refactor\\functions\\arguments\\assert\\missing\\add.mjs",
 "part_id": "93d92823-b0f1-48ac-a312-c48d4a6eb681",
 "hunks": [
  "0+import { refactor_functions_arguments_assert_missing_add_excludes } from './add/excludes.mjs';\nimport { refactor_arguments_assert_add_no_check } from '../../../../arguments/assert/add/no/check.mjs';\nimport { js_node_call_expression_statement_if_name_equal } from '../../../../../js/node/call/expression/statement/if/name/equal.mjs';\nimport { file_js_all_map_args_if_function } from '../../../../../file/js/all/map/args/if/function.mjs';\nimport { metadata } from '../../../../../metadata.mjs';\nimport { list_length_is_0 } from '../../../../../list/length/is/0.mjs';\nimport { arguments_assert } from '../../../../../arguments/assert.mjs';\nimport { js_function_delcaration_to_statements } from '../../../../../js/function/delcaration/to/statements.mjs';\nimport { list_first } from '../../../../../list/first.mjs';\nimport { function_name_get } from '../../../../../function/name/get.mjs';\nimport { refactor_import_fix } from '../../../../import/fix.mjs';\nexport async function refactor_functions_arguments_assert_missing_add() {\n    arguments_assert(arguments, []);\n    let excludes = await refactor_functions_arguments_assert_missing_add_excludes();\n    await file_js_all_map_args_if_function(async function logic(args) {\n        let {function_declaration} = args;\n        let exists = false;\n        let statements = js_function_delcaration_to_statements(function_declaration);\n        if (!list_length_is_0(statements)) {\n            let statement_first = list_first(statements);\n            js_node_call_expression_statement_if_name_equal(statement_first, function_name_get(arguments_assert), function on_name_equal() {\n                exists = true;\n            });\n        }\n        if (!exists) {\n            refactor_arguments_assert_add_no_check(function_declaration, excludes);\n            await refactor_import_fix(args);\n        }\n    });\n    metadata([]);\n}"
 ]
}