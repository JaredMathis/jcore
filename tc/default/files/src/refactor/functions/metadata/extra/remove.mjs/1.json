{
 "file_path": "src\\refactor\\functions\\metadata\\extra\\remove.mjs",
 "part_id": "8a6a1225-1eb8-42c5-a742-e2bf6d719927",
 "hunks": [
  "0+import { arguments_assert } from '../../../../arguments/assert.mjs';\nimport { js_mapper_args_to_metadata_args } from '../../../../js/mapper/args/to/metadata/args.mjs';\nimport { js_statement_metadata_args_get } from '../../../../js/statement/metadata/args/get.mjs';\nimport { list_add_multiple } from '../../../../list/add/multiple.mjs';\nimport { subtract_1 } from '../../../../subtract/1.mjs';\nimport { list_take } from '../../../../list/take.mjs';\nimport { js_statement_metadata_is } from '../../../../js/statement/metadata/is.mjs';\nimport { file_js_all_map_args_if_function } from '../../../../file/js/all/map/args/if/function.mjs';\nimport { metadata } from '../../../../metadata.mjs';\nimport { list_length } from '../../../../list/length.mjs';\nimport { list_filter } from '../../../../list/filter.mjs';\nimport { list_remove } from '../../../../list/remove.mjs';\nexport async function refactor_functions_metadata_extra_remove() {\n    arguments_assert(arguments, []);\n    await file_js_all_map_args_if_function(async function logic(args) {\n        let last_metadata_args = js_mapper_args_to_metadata_args(args);\n        let remaining = list_take(statements, subtract_1(list_length(statements)));\n        let removals = list_filter(remaining, js_statement_metadata_is);\n        for (let r of removals) {\n            let expression_args = js_statement_metadata_args_get(r);\n            list_add_multiple(last_metadata_args, expression_args);\n            list_remove(statements, r);\n        }\n    });\n    metadata([]);\n}"
 ]
}