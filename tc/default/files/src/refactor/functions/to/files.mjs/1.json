{
 "file_path": "src\\refactor\\functions\\to\\files.mjs",
 "part_id": "03cb16ad-a37c-40c4-9de8-4db39dd49a2e",
 "hunks": [
  "0+import { defined_is } from '../../../defined/is.mjs';\nimport { refactor_multiple } from '../../multiple.mjs';\nimport { function_auto_after_refactors_first } from '../../../function/auto/after/refactors/first.mjs';\nimport { arguments_assert } from '../../../arguments/assert.mjs';\nimport { metadata } from '../../../metadata.mjs';\nimport { function_name_get } from '../../../function/name/get.mjs';\nimport { function_add_with_declaration } from '../../../function/add/with/declaration.mjs';\nimport { list_remove_all } from '../../../list/remove/all.mjs';\nimport { function_map } from '../../../function/map.mjs';\nimport { list_length_is_0 } from '../../../list/length/is/0.mjs';\nimport { function_exists } from '../../../function/exists.mjs';\nimport { js_function_declarations_to_names } from '../../../js/function/declarations/to/names.mjs';\nimport { js_node_is_function_declaration } from '../../../js/node/is/function/declaration.mjs';\nimport { js_without_imports } from '../../../js/without/imports.mjs';\nimport { list_filter } from '../../../list/filter.mjs';\nimport { assert } from '../../../assert.mjs';\nimport { refactor_import_fix } from '../../import/fix.mjs';\nimport { js_body_get } from '../../../js/body/get.mjs';\nimport { js_function_declaration_to_name } from '../../../js/function/declaration/to/name.mjs';\nexport async function refactor_functions_to_files(args) {\n    arguments_assert(arguments, [defined_is]);\n    let {parsed} = args;\n    let without_imports = js_without_imports(parsed);\n    let function_declarations_to_export = list_filter(without_imports, js_node_is_function_declaration);\n    let function_names_new = js_function_declarations_to_names(function_declarations_to_export);\n    if (list_length_is_0(function_names_new)) {\n        return;\n    }\n    for (let n of function_names_new) {\n        assert(!await function_exists(n));\n    }\n    for (let fd of function_declarations_to_export) {\n        let function_name = js_function_declaration_to_name(fd);\n        await function_add_with_declaration(function_name, fd);\n    }\n    for (let n of function_names_new) {\n        await function_map(function_name_get(refactor_import_fix), n);\n    }\n    let body = js_body_get(parsed);\n    list_remove_all(body, function_declarations_to_export);\n    function_auto_after_refactors_first;\n    let after = function_auto_after_refactors_first();\n    await refactor_multiple(args, after);\n    metadata([]);\n}"
 ]
}