{
 "file_path": "src\\refactor\\import\\missing.mjs",
 "part_id": "3d871fb4-5693-468c-aa9e-a8770d35f4d8",
 "hunks": [
  "0+import { arguments_assert } from '../../arguments/assert.mjs';\nimport { metadata } from '../../metadata.mjs';\nimport { js_identifiers } from '../../js/identifiers.mjs';\nimport { function_name_all } from '../../function/name/all.mjs';\nimport { list_map } from '../../list/map.mjs';\nimport { list_contains } from '../../list/contains.mjs';\nimport { list_filter } from '../../list/filter.mjs';\nimport { comment } from '../../comment.mjs';\nimport { list_without_multiple } from '../../list/without/multiple.mjs';\nimport { list_add_beginning_multiple } from '../../list/add/beginning/multiple.mjs';\nimport { js_function_name_to_import } from '../../js/function/name/to/import.mjs';\nimport { js_import_all_to_function_name } from '../../js/import/all/to/function/name.mjs';\nimport { js_exported_function_names } from '../../js/exported/function/names.mjs';\nimport { js_body_get } from '../../js/body/get.mjs';\nimport { js_mapper_args_is } from '../../js/mapper/args/is.mjs';\nexport async function refactor_import_missing(args) {\n    arguments_assert(arguments, [js_mapper_args_is]);\n    let {parsed} = args;\n    let import_name_all = await js_import_all_to_function_name(parsed);\n    let identifiers = js_identifiers(parsed);\n    let function_names = await function_name_all();\n    comment(`Identifiers that are also function names`);\n    let identifier_function_names = list_filter(identifiers, i => list_contains(function_names, i));\n    comment(`Identifiers missing an import`);\n    let missing = list_filter(identifier_function_names, i => !list_contains(import_name_all, i));\n    let exported_function_names = js_exported_function_names(parsed);\n    let without = list_without_multiple(missing, exported_function_names);\n    let import_new_all = list_map(without, js_function_name_to_import);\n    let body = js_body_get(parsed);\n    list_add_beginning_multiple(body, import_new_all);\n    metadata([]);\n}"
 ]
}