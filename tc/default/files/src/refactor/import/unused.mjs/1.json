{
 "file_path": "src\\refactor\\import\\unused.mjs",
 "part_id": "42d5934f-61d0-4a1b-961f-6aa458e2edf8",
 "hunks": [
  "0+import { arguments_assert } from '../../arguments/assert.mjs';\nimport { js_imports_remove_multiple } from '../../js/imports/remove/multiple.mjs';\nimport { metadata } from '../../metadata.mjs';\nimport { js_identifier_counts } from '../../js/identifier/counts.mjs';\nimport { object_each_filter } from '../../object/each/filter.mjs';\nimport { list_intersection } from '../../list/intersection.mjs';\nimport { list_map } from '../../list/map.mjs';\nimport { object_property_get } from '../../object/property/get.mjs';\nimport { js_import_all_with_function_names } from '../../js/import/all/with/function/names.mjs';\nimport { js_mapper_args_is } from '../../js/mapper/args/is.mjs';\nexport async function refactor_import_unused(args) {\n    arguments_assert(arguments, [js_mapper_args_is]);\n    let parsed = object_property_get(args, 'parsed');\n    let imports = await js_import_all_with_function_names(parsed);\n    let import_name_all = list_map(imports, w => object_property_get(w, 'name'));\n    let counts = js_identifier_counts(parsed);\n    let twices = object_each_filter(counts, function is_two(value, key) {\n        return value === 2;\n    });\n    let intersection = list_intersection(import_name_all, twices);\n    js_imports_remove_multiple(parsed, imports, intersection);\n    metadata([]);\n}"
 ]
}