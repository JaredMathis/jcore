{
 "file_path": "src\\refactor\\unasyncify.mjs",
 "part_id": "ad93c5f2-bf01-4c23-a25e-45ef3da32221",
 "hunks": [
  "0+import { refactor_metadata_generated_add_function } from './metadata/generated/add/function.mjs';\nimport { defined_is } from '../defined/is.mjs';\nimport { arguments_assert } from '../arguments/assert.mjs';\nimport { function_auto_after_refactors_invoke } from '../function/auto/after/refactors/invoke.mjs';\nimport { js_import_remove_if_exists } from '../js/import/remove/if/exists.mjs';\nimport { js_import_all_with_function_names } from '../js/import/all/with/function/names.mjs';\nimport { js_identifier_rename_if } from '../js/identifier/rename/if.mjs';\nimport { function_naming_suffix_async } from '../function/naming/suffix/async.mjs';\nimport { metadata } from '../metadata.mjs';\nimport { js_keyword_async } from '../js/keyword/async.mjs';\nimport { object_property_set } from '../object/property/set.mjs';\nimport { refactor_unasyncify_each } from './unasyncify/each.mjs';\nimport { js_callable_multiple } from '../js/callable/multiple.mjs';\nimport { js_visit_nodes_all } from '../js/visit/nodes/all.mjs';\nimport { assert } from '../assert.mjs';\nimport { comment } from '../comment.mjs';\nimport { string_ends_with } from '../string/ends/with.mjs';\nimport { string_suffix_without } from '../string/suffix/without.mjs';\nimport { js_function_declaration_to_name } from '../js/function/declaration/to/name.mjs';\nexport async function refactor_unasyncify(args) {\n    arguments_assert(arguments, [defined_is]);\n    let {parsed, function_declaration} = args;\n    comment(`To remove this assert, fix the code - right now it does not handle functions or arrows inside the exported function`);\n    assert(!js_callable_multiple(parsed));\n    js_visit_nodes_all(parsed, refactor_unasyncify_each);\n    object_property_set(function_declaration, js_keyword_async(), false);\n    await refactor_metadata_generated_add_function(args);\n    let suffix = function_naming_suffix_async();\n    js_identifier_rename_if(args, name => string_ends_with(name, suffix), name => string_suffix_without(name, suffix));\n    let imports = await js_import_all_with_function_names(parsed);\n    let function_name = js_function_declaration_to_name(function_declaration);\n    js_import_remove_if_exists(parsed, imports, function_name);\n    await function_auto_after_refactors_invoke(args);\n    metadata([]);\n}"
 ]
}