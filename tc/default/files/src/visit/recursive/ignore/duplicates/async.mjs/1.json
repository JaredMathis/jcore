{
 "file_path": "src\\visit\\recursive\\ignore\\duplicates\\async.mjs",
 "part_id": "91bd4865-e916-4ae7-96f8-187db2c7849c",
 "hunks": [
  "0+import { list_is } from '../../../../list/is.mjs';\nimport { arguments_assert } from '../../../../arguments/assert.mjs';\nimport { list_last_remove_verify } from '../../../../list/last/remove/verify.mjs';\nimport { list_add_exists_not } from '../../../../list/add/exists/not.mjs';\nimport { list_add } from '../../../../list/add.mjs';\nimport { list_contains } from '../../../../list/contains.mjs';\nimport { list_last_or_null } from '../../../../list/last/or/null.mjs';\nimport { function_is } from '../../../../function/is.mjs';\nimport { boolean_is } from '../../../../boolean/is.mjs';\nimport { defined_is } from '../../../../defined/is.mjs';\nexport async function visit_recursive_ignore_duplicates_async(node, children_get, lambda, stack, visited, ignore_duplicates) {\n    arguments_assert(arguments, [\n        defined_is,\n        function_is,\n        function_is,\n        list_is,\n        list_is,\n        boolean_is\n    ]);\n    let parent = list_last_or_null(stack);\n    if (ignore_duplicates) {\n        if (list_contains(visited, node)) {\n            return;\n        }\n        list_add(visited, node);\n    }\n    list_add_exists_not(stack, node);\n    await lambda({\n        node,\n        parent\n    });\n    let children = await children_get(node);\n    for (let c of children) {\n        await visit_recursive_ignore_duplicates_async(c, children_get, lambda, stack, visited, ignore_duplicates);\n    }\n    list_last_remove_verify(stack, node);\n}"
 ]
}