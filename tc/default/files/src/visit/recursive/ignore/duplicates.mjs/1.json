{
 "file_path": "src\\visit\\recursive\\ignore\\duplicates.mjs",
 "part_id": "9a3993ba-35d4-4eaa-9261-e6e87dd96acd",
 "hunks": [
  "0+import { metadata_generated } from '../../../metadata/generated.mjs';\nimport { metadata } from '../../../metadata.mjs';\nimport { list_last_remove_verify } from '../../../list/last/remove/verify.mjs';\nimport { list_add_exists_not } from '../../../list/add/exists/not.mjs';\nimport { list_add } from '../../../list/add.mjs';\nimport { list_contains } from '../../../list/contains.mjs';\nimport { list_last_or_null } from '../../../list/last/or/null.mjs';\nimport { boolean_is } from '../../../boolean/is.mjs';\nimport { list_is } from '../../../list/is.mjs';\nimport { function_is } from '../../../function/is.mjs';\nimport { defined_is } from '../../../defined/is.mjs';\nimport { arguments_assert } from '../../../arguments/assert.mjs';\nexport function visit_recursive_ignore_duplicates(node, children_get, lambda, stack, visited, ignore_duplicates) {\n    arguments_assert(arguments, [\n        defined_is,\n        function_is,\n        function_is,\n        list_is,\n        list_is,\n        boolean_is\n    ]);\n    let parent = list_last_or_null(stack);\n    if (ignore_duplicates) {\n        if (list_contains(visited, node)) {\n            return;\n        }\n        list_add(visited, node);\n    }\n    list_add_exists_not(stack, node);\n    lambda({\n        node,\n        parent\n    });\n    let children = children_get(node);\n    for (let c of children) {\n        visit_recursive_ignore_duplicates(c, children_get, lambda, stack, visited, ignore_duplicates);\n    }\n    list_last_remove_verify(stack, node);\n    metadata([metadata_generated()]);\n}"
 ]
}