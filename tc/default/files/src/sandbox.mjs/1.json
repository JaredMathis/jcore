{
 "file_path": "src\\sandbox.mjs",
 "part_id": "e3c95c77-dffd-46e6-883e-528392592ac3",
 "hunks": [
  "0+import { version_property_part_id } from './version/property/part/id.mjs';\nimport { version_property_parts } from './version/property/parts.mjs';\nimport { directory_property_json } from './directory/property/json.mjs';\nimport { directory_read_json } from './directory/read/json.mjs';\nimport { version_path_files_get } from './version/path/files/get.mjs';\nimport { version_path_commits_get } from './version/path/commits/get.mjs';\nimport { version_repository_file_size_max } from './version/repository/file/size/max.mjs';\nimport { version_repository_default } from './version/repository/default.mjs';\nimport { database_set } from './database/set.mjs';\nimport { version_differences } from './version/differences.mjs';\nimport { string_difference_apply_parse } from './string/difference/apply/parse.mjs';\nimport { string_multiply } from './string/multiply.mjs';\nimport { random_get } from './random/get.mjs';\nimport { random_between } from './random/between.mjs';\nimport { tests_generate } from './tests/generate.mjs';\nimport { function_tests_generate_next } from './function/tests/generate/next.mjs';\nimport { list_add } from './list/add.mjs';\nimport { equal } from './equal.mjs';\nimport { assert } from './assert.mjs';\nimport { range } from './range.mjs';\nimport { string_difference_apply } from './string/difference/apply.mjs';\nimport { string_difference_get } from './string/difference/get.mjs';\nimport { tests } from './tests.mjs';\nimport { version_commit_and_removals } from './version/commit/and/removals.mjs';\nimport { log } from './log.mjs';\nimport { string_letter_is } from './string/letter/is.mjs';\nimport { function_tests_generate_after } from './function/tests/generate/after.mjs';\nimport { function_tests_generate_generic_each } from './function/tests/generate/generic/each.mjs';\nimport { tests_name_next } from './tests/name/next.mjs';\nimport { function_name_get } from './function/name/get.mjs';\nimport { arguments_assert } from './arguments/assert.mjs';\nimport { string_split } from './string/split.mjs';\nimport { string_underscore_is } from './string/underscore/is.mjs';\nimport { object_property_get } from './object/property/get.mjs';\nimport { list_contains } from './list/contains.mjs';\nexport async function sandbox() {\n    arguments_assert(arguments, []);\n    const repository_name = version_repository_default();\n    await version_commit_and_removals(repository_name);\n    return;\n    let repository_files_path = version_path_files_get(repository_name);\n    let files = await directory_read_json(repository_files_path);\n    let repository_commits_path = version_path_commits_get(repository_name);\n    let contents = await directory_read_json(repository_commits_path);\n    for (let commit of contents) {\n        let commit_json = object_property_get(commit, directory_property_json());\n        let commit_parts = object_property_get(commit_json, version_property_parts());\n        let commit_files = [];\n        for (let file of files) {\n            let file_json = object_property_get(file, directory_property_json());\n            let part_id = object_property_get(file_json, version_property_part_id());\n            if (list_contains(commit_parts, part_id)) {\n                list_add(commit_files, file_json);\n            }\n        }\n    }\n    return;\n    let file_size_max = await version_repository_file_size_max(repository_name);\n    console.log({ file_size_max });\n    return;\n    return;\n    const collection_path = 'cities';\n    const document_path = 'new-city-id';\n    const document_data = { message: 'test' };\n    await database_set(collection_path, document_path, document_data);\n    return;\n    let differences = await version_differences(repository_name);\n    console.log(differences);\n    return;\n    await tests();\n    let fn1 = string_difference_get;\n    let fn2 = string_difference_apply;\n    let pairs = [];\n    for (let i of range(10)) {\n        let left = random_input();\n        let right = random_input();\n        let args1 = [\n            left,\n            right\n        ];\n        let result1 = fn1(...args1);\n        console.log({ result1 });\n        let args2 = [\n            left,\n            result1\n        ];\n        let result2 = fn2(...args2);\n        assert(equal(right, result2));\n        list_add(pairs, {\n            args1,\n            args2\n        });\n    }\n    for (let pair of pairs) {\n        let {args1, args2} = pair;\n        await function_tests_generate_next(fn1, args1);\n        await function_tests_generate_next(fn2, args2);\n    }\n    await tests_generate();\n    function random_input() {\n        let result = '';\n        for (let index of range(random_between(8, 16))) {\n            let c = random_get() > 0.5 ? 'a' : 'b';\n            let m = string_multiply(c, random_between(1, 3));\n            result = result + m;\n        }\n        return result;\n    }\n    return;\n    let values = [\n        '2+a',\n        '3-2',\n        '10+def',\n        '123-5'\n    ];\n    await tests();\n    for (let v of values) {\n        await function_tests_generate_next(string_difference_apply_parse, [v]);\n    }\n    await tests_generate();\n    return;\n    let functions = [\n        string_letter_is,\n        string_underscore_is\n    ];\n    for (let f of functions) {\n        let function_name = function_name_get(f);\n        log(function_name);\n        let inputs_string = `1,2,3,_,d,b,c`;\n        let inputs = string_split(inputs_string, ',');\n        for (let i of inputs) {\n            let test_name = await tests_name_next(function_name);\n            await function_tests_generate_generic_each(function_name, test_name, [i]);\n        }\n        await function_tests_generate_after();\n    }\n    return;\n}"
 ]
}