{
 "file_path": "src\\string\\difference\\get\\recursive.mjs",
 "part_id": "cf9f7bf4-9cae-4500-b179-c95e2b1881ee",
 "hunks": [
  "0+import { string_length } from '../../length.mjs';\nimport { string_difference_added } from '../added.mjs';\nimport { string_difference_removed } from '../removed.mjs';\nimport { list_add_multiple } from '../../../list/add/multiple.mjs';\nimport { string_left_right_property_right } from '../../left/right/property/right.mjs';\nimport { string_left_right_property_left } from '../../left/right/property/left.mjs';\nimport { string_left_right } from '../../left/right.mjs';\nimport { list_add } from '../../../list/add.mjs';\nimport { string_empty_not_is } from '../../empty/not/is.mjs';\nimport { string_sub_max_property_right_index } from '../../sub/max/property/right/index.mjs';\nimport { string_sub_max_property_left_index } from '../../sub/max/property/left/index.mjs';\nimport { string_sub_max_property_offset } from '../../sub/max/property/offset.mjs';\nimport { object_property_get } from '../../../object/property/get.mjs';\nimport { string_sub_max } from '../../sub/max.mjs';\nimport { equal } from '../../../equal.mjs';\nimport { integer_is } from '../../../integer/is.mjs';\nimport { string_is } from '../../is.mjs';\nimport { arguments_assert } from '../../../arguments/assert.mjs';\nexport function string_difference_get_recursive(left, right, left_offset, right_offset) {\n    arguments_assert(arguments, [\n        string_is,\n        string_is,\n        integer_is,\n        integer_is\n    ]);\n    let result = [];\n    if (equal(left, right)) {\n        return result;\n    }\n    let max = string_sub_max(left, right);\n    let offset = object_property_get(max, string_sub_max_property_offset());\n    let left_index = object_property_get(max, string_sub_max_property_left_index());\n    let right_index = object_property_get(max, string_sub_max_property_right_index());\n    if (offset === 0) {\n        if (string_empty_not_is(left)) {\n            const position = left_index + left_offset;\n            list_add(result, position + string_difference_removed() + string_length(left));\n        }\n        if (string_empty_not_is(right)) {\n            const position = right_index + right_offset;\n            list_add(result, position + string_difference_added() + right);\n        }\n        return result;\n    }\n    let left_lr = string_left_right(left, left_index, offset);\n    let left_left = object_property_get(left_lr, string_left_right_property_left());\n    let left_right = object_property_get(left_lr, string_left_right_property_right());\n    let right_lr = string_left_right(right, right_index, offset);\n    let right_left = object_property_get(right_lr, string_left_right_property_left());\n    let right_right = object_property_get(right_lr, string_left_right_property_right());\n    let left_result = string_difference_get_recursive(left_left, right_left, left_offset, right_offset);\n    list_add_multiple(result, left_result);\n    let right_result = string_difference_get_recursive(left_right, right_right, left_offset + offset + left_index, right_offset + offset + right_index);\n    list_add_multiple(result, right_result);\n    return result;\n}"
 ]
}