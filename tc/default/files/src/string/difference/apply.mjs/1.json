{
 "file_path": "src\\string\\difference\\apply.mjs",
 "part_id": "65ef2b71-6fd8-4ce2-9871-cc3dd31413ad",
 "hunks": [
  "0+import { string_difference_property_added } from './property/added.mjs';\nimport { value_new } from '../../value/new.mjs';\nimport { list_sort_property_generic } from '../../list/sort/property/generic.mjs';\nimport { list_filter_property } from '../../list/filter/property.mjs';\nimport { string_left_right_property_right } from '../left/right/property/right.mjs';\nimport { string_left_right_property_left } from '../left/right/property/left.mjs';\nimport { string_left_right } from '../left/right.mjs';\nimport { string_difference_added } from './added.mjs';\nimport { string_difference_removed } from './removed.mjs';\nimport { string_difference_property_position } from './property/position.mjs';\nimport { string_difference_property_operation } from './property/operation.mjs';\nimport { string_difference_apply_parse } from './apply/parse.mjs';\nimport { arguments_assert } from '../../arguments/assert.mjs';\nimport { string_is } from '../is.mjs';\nimport { list_is } from '../../list/is.mjs';\nimport { list_length_is_0 } from '../../list/length/is/0.mjs';\nimport { list_map } from '../../list/map.mjs';\nimport { object_property_get } from '../../object/property/get.mjs';\nimport { equal } from '../../equal.mjs';\nimport { string_difference_property_removed } from './property/removed.mjs';\nimport { add } from '../../add.mjs';\nimport { assert } from '../../assert.mjs';\nimport { list_length } from '../../list/length.mjs';\nexport function string_difference_apply(string_old, hunks) {\n    arguments_assert(arguments, [\n        string_is,\n        list_is\n    ]);\n    if (list_length_is_0(hunks)) {\n        return string_old;\n    }\n    let mapped = list_map(hunks, string_difference_apply_parse);\n    let removals = list_filter_property(mapped, string_difference_property_operation(), string_difference_removed());\n    list_sort_property_generic(removals, string_difference_property_position(), true);\n    let addeds = list_filter_property(mapped, string_difference_property_operation(), string_difference_added());\n    assert(equal(list_length(mapped), add(list_length(removals), list_length(addeds))));\n    list_sort_property_generic(addeds, string_difference_property_position(), false);\n    let value = string_old;\n    for (let m of removals) {\n        let position = object_property_get(m, string_difference_property_position());\n        let removed = object_property_get(m, string_difference_property_removed());\n        let lr = string_left_right(value, position, removed);\n        let left = object_property_get(lr, string_left_right_property_left());\n        let right = object_property_get(lr, string_left_right_property_right());\n        let value_new = `${ left }${ right }`;\n        value = value_new;\n    }\n    for (let m of addeds) {\n        let position = object_property_get(m, string_difference_property_position());\n        let added = object_property_get(m, string_difference_property_added());\n        let lr = string_left_right(value, position, 0);\n        let left = object_property_get(lr, string_left_right_property_left());\n        let right = object_property_get(lr, string_left_right_property_right());\n        let value_new = `${ left }${ added }${ right }`;\n        value = value_new;\n    }\n    return value;\n}"
 ]
}