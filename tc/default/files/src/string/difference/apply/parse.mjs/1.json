{
 "file_path": "src\\string\\difference\\apply\\parse.mjs",
 "part_id": "1895f9a6-7f47-4982-849d-92c98a149b68",
 "hunks": [
  "0+import { string_difference_property_removed } from '../property/removed.mjs';\nimport { equal } from '../../../equal.mjs';\nimport { string_difference_property_added } from '../property/added.mjs';\nimport { string_difference_property_operation } from '../property/operation.mjs';\nimport { string_difference_property_position } from '../property/position.mjs';\nimport { string_sub } from '../../sub.mjs';\nimport { list_min } from '../../../list/min.mjs';\nimport { string_index_of_try_valid } from '../../index/of/try/valid.mjs';\nimport { arguments_assert } from '../../../arguments/assert.mjs';\nimport { string_is } from '../../is.mjs';\nimport { string_index_of_try } from '../../index/of/try.mjs';\nimport { string_difference_removed } from '../removed.mjs';\nimport { string_difference_added } from '../added.mjs';\nimport { error } from '../../../error.mjs';\nimport { list_filter } from '../../../list/filter.mjs';\nimport { list_length_is_0 } from '../../../list/length/is/0.mjs';\nimport { integer_parse } from '../../../integer/parse.mjs';\nimport { add_1 } from '../../../add/1.mjs';\nimport { string_length } from '../../length.mjs';\nimport { list_map } from '../../../list/map.mjs';\nimport { object_property_initialize } from '../../../object/property/initialize.mjs';\nimport { assert } from '../../../assert.mjs';\nimport { string_length_is_0 } from '../../length/is/0.mjs';\nexport function string_difference_apply_parse(hunk) {\n    arguments_assert(arguments, [string_is]);\n    let operations = [\n        string_difference_removed(),\n        string_difference_added()\n    ];\n    let indexes = list_map(operations, o => string_index_of_try(hunk, o));\n    let valid = list_filter(indexes, string_index_of_try_valid);\n    if (list_length_is_0(valid)) {\n        error();\n    }\n    let valid_min = list_min(valid);\n    let position_string = string_sub(hunk, 0, valid_min);\n    let position = integer_parse(position_string);\n    const valid_min_add_1 = add_1(valid_min);\n    let operation = string_sub(hunk, valid_min, valid_min_add_1);\n    let after = string_sub(hunk, valid_min_add_1, string_length(hunk));\n    const result = {\n        [string_difference_property_position()]: position,\n        [string_difference_property_operation()]: operation\n    };\n    if (equal(operation, string_difference_removed())) {\n        let count = integer_parse(after);\n        assert(count >= 1);\n        object_property_initialize(result, string_difference_property_removed(), count);\n    } else if (equal(operation, string_difference_added())) {\n        assert(!string_length_is_0(after));\n        object_property_initialize(result, string_difference_property_added(), after);\n    } else {\n        error();\n    }\n    return result;\n}"
 ]
}