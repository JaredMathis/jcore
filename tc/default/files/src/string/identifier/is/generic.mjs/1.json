{
 "file_path": "src\\string\\identifier\\is\\generic.mjs",
 "part_id": "24e8b980-9d73-4138-be90-6479ba5dd3e3",
 "hunks": [
  "0+import { arguments_assert } from '../../../arguments/assert.mjs';\nimport { string_letter_digit_or_underscore_is } from '../../letter/digit/or/underscore/is.mjs';\nimport { string_includes } from '../../includes.mjs';\nimport { string_underscore } from '../../underscore.mjs';\nimport { string_underscore_is } from '../../underscore/is.mjs';\nimport { list_last } from '../../../list/last.mjs';\nimport { string_letter_is } from '../../letter/is.mjs';\nimport { list_first } from '../../../list/first.mjs';\nimport { list_length_is_0 } from '../../../list/length/is/0.mjs';\nimport { string_to_list } from '../../to/list.mjs';\nimport { string_is } from '../../is.mjs';\nimport { boolean_is } from '../../../boolean/is.mjs';\nimport { defined_is } from '../../../defined/is.mjs';\nexport function string_identifier_is_generic(value, is_identifier) {\n    arguments_assert(arguments, [\n        defined_is,\n        boolean_is\n    ]);\n    if (!string_is(value)) {\n        return false;\n    }\n    let list = string_to_list(value);\n    if (list_length_is_0(list)) {\n        return false;\n    }\n    if (is_identifier) {\n        let first = list_first(list);\n        if (!string_letter_is(first)) {\n            return false;\n        }\n        let last = list_last(list);\n        if (string_underscore_is(last)) {\n            return false;\n        }\n    }\n    let underscore = string_underscore();\n    if (string_includes(value, `${ underscore }${ underscore }`)) {\n        return false;\n    }\n    for (let c of list) {\n        if (!string_letter_digit_or_underscore_is(c)) {\n            return false;\n        }\n    }\n    return true;\n}"
 ]
}